// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Authentication System Models
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  fullName      String?
  role          Role      @default(USER)
  avatarUrl     String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  verification  UserVerification?
  sessions      Session[]
  
  // University Relations
  enrollments   Enrollment[]
  studyPlans    StudyPlan[]
  progress      Progress[]
  assignments   Assignment[]
  scheduleItems ScheduleItem[]
}

model UserVerification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// University System Models
model University {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  code          String    @unique
  description   String?
  website       String?
  logoUrl       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  courses       Course[]
}

model Course {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  universityId  String    @db.ObjectId
  code          String
  title         String
  description   String?
  credits       Int       @default(3)
  semester      String
  year          Int
  instructor    String?
  syllabus      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  university    University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  enrollments   Enrollment[]
  assignments   Assignment[]
  scheduleItems ScheduleItem[]
  progress      Progress[]
  
  @@unique([universityId, code, semester, year])
}

model Enrollment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  courseId      String    @db.ObjectId
  status        EnrollmentStatus @default(ENROLLED)
  grade         String?
  finalGrade    Float?
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model StudyPlan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  title         String
  description   String?
  type          StudyPlanType @default(PERSONAL)
  targetGPA     Float?
  isActive      Boolean   @default(true)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         StudyTask[]
}

model StudyTask {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  studyPlanId   String    @db.ObjectId
  title         String
  description   String?
  dueDate       DateTime?
  priority      Priority  @default(MEDIUM)
  status        TaskStatus @default(PENDING)
  estimatedHours Int?
  actualHours   Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  studyPlan     StudyPlan @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
}

model Assignment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String    @db.ObjectId
  userId        String    @db.ObjectId
  title         String
  description   String?
  dueDate       DateTime
  maxPoints     Float     @default(100)
  earnedPoints  Float?
  status        AssignmentStatus @default(ASSIGNED)
  submissionUrl String?
  feedback      String?
  submittedAt   DateTime?
  gradedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Progress {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  courseId      String    @db.ObjectId
  completionPercentage Float @default(0)
  currentGrade  Float?
  studyHours    Int       @default(0)
  lastAccessed  DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model ScheduleItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  courseId      String?   @db.ObjectId
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  dayOfWeek     Int       // 0-6 (Sunday-Saturday)
  recurrence    RecurrenceType @default(NONE)
  location      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course?   @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Game {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  link          String
  category      String
  color         String
  isMultiplayer Boolean  @default(false)
  createdAt     DateTime @default(now())
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
  WITHDRAWN
}

enum StudyPlanType {
  PERSONAL
  SEMESTER
  YEARLY
  GRADUATION
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  GRADED
  LATE
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}
